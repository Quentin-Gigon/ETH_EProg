/*
Das Programm “WoerterRaten.java” enthält Fragmente eines Rate-Spiels, welches Sie vervoll- ständigen sollen. In dem Spiel wählt der Computer zufällig ein Wort w aus einer Liste aus und der Mensch muss versuchen, das Wort zu erraten. In jeder Runde kann der Mensch eine Zeichenfolge z (welche einen oder mehrere Buchstaben enthält) eingeben und der Computer gibt einen Hinweis dazu. Folgende Hinweise sind möglich:
1. w beginnt mit z 2. w endet mit z
3. w enthält z
4. w enthält nicht z
Die Hinweise 1 und 2 können kombiniert werden. Beachten Sie ausserdem, dass die Hinweise 1 und 2 den Hinweis 3 schon enthalten. Das Spiel endet, wenn der Mensch das Wort vollständig eingibt. Dann gibt der Computer den Pseudo-Hinweis “w ist z” und die Anzahl Versuche aus.
a) Öffnen Sie die Text-Datei “woerter.txt”, welche sich direkt im Projekt-Ordner befindet. Aus dieser Datei liest das Programm (in der Methode liesWoerter()) die Wörter ein. Auf der ersten Zeile steht die Anzahl der Wörter, danach folgt auf jeder Zeile ein neues Wort. Fügen Sie der Liste einige eigene Wörter hinzu und ändern Sie die Zahl oben entsprechend.
b) Vervollständigen Sie das Programm “WoerterRaten.java”, indem Sie die noch leeren Meth- oden ausfüllen. Beachten Sie, dass die Datei “WoerterRatenTest.java” Tests für die Metho- den hinweis() und zufallsWort() enthält. Wenn Sie sich an die Vorgaben gehalten haben, sollten alle Tests erfolgreich durchlaufen. Folgende Methoden könnten sich als hilfreich er- weisen: String.equals(), String.startsWith(), String.endsWith(), String.contains()
1
und Random.nextInt() (um nextInt() aufzurufen, müssen Sie zuerst per new Random() ein Objekt vom Typ Random erstellen).
Für die Haupt-Methode rateSpiel() gibt es keine Tests. Sie sollten diese Methode so schreiben, dass sich das Programm ungefähr wie in folgendem Beispiel-Ablauf verhält (die Benutzer- Eingaben sind grün dargestellt):
      Tipp? e
      Das Wort enthält nicht "e"!
      Tipp? a
      Das Wort endet mit "a"!
      Tipp? j
      Das Wort beginnt mit "j"!
      Tipp? v
      Das Wort enthält "v"!
      Tipp? java
      Das Wort ist "java"!
      Glückwunsch, du hast nur 5 Versuche benötigt!
Tipp: Das Spiel wird richtig schwierig, wenn Sie die Liste der möglichen Wörter nicht kennen (oder die Liste sehr lang ist). Tauschen Sie doch mal Ihre “woerter.txt”-Datei mit der eines Mitstudierenden aus, ohne sie anzusehen.
*/


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

public class WoerterRaten {

	public static void main(String[] args) throws FileNotFoundException {
		Scanner scanner = new Scanner(new File("woerter.txt"));
		String[] woerter = liesWoerter(scanner);
		scanner.close();

		rateSpiel(woerter);
	}

	/**
	 * Liest die Wörter von dem gegebenen Scanner ein und gibt sie als Array zurück.
	 */
	static String[] liesWoerter(Scanner scanner) {
		String[] woerter = new String[scanner.nextInt()];
		for (int i = 0; i < woerter.length; i++) {
			woerter[i] = scanner.next();
		}
		return woerter;
	}

	/**
	 * Führt das Rate-Spiel einmal durch.
	 */
	static void rateSpiel(String[] woerter) {

		Scanner input = new Scanner(System.in);
		System.out.println("What is your name?");
		String name = input.next();
		String random_word = zufallsWort(woerter);
		String tip_question = "-";
		int counter = 0;
		while (!tip_question.equals(random_word)) {
			System.out.println("Do you want a tip " + name + "? Input a letter or a word!");
			tip_question = input.next();
			String tip_answer = hinweis(random_word, tip_question);
			System.out.println(tip_answer);
			counter++;
			if (counter == 10) {
				System.out.println("More than 10 attemps, YOU LOST!!!");
				System.exit(0);
			}
		}
		System.out.println("Congrats, you guessed the word after " + counter + " attempts!");

	}

	/**
	 * Wählt zufällig ein Wort aus dem "woerter"-Array aus und gibt es zurück.
	 */
	static String zufallsWort(String[] woerter) {
		Random random = new Random();
		int random_index = random.nextInt(woerter.length);
		String random_word = woerter[random_index];
		return random_word;
	}

	/**
	 * Vergleicht das gegebene "wort" und die "tipp"-Zeichenkette und gibt einen
	 * Hinweis zurück. Folgende Hinweise sind möglich: "ist", "beginnt mit", "endet
	 * mit", "beginnt mit und endet mit", "enthält" oder "enthält nicht".
	 */
	static String hinweis(String wort, String tipp) {
		if (wort.equals(tipp))
			return "You got it! The word is " + tipp + " !";
		if (wort.startsWith(tipp)) {
			return "The word starts with " + tipp + " !";
		}
		if (wort.endsWith(tipp)) {
			return "The word ends with " + tipp + " !";
		}
		if (!wort.startsWith(tipp) && !wort.endsWith(tipp) && wort.contains(tipp)) {
			return "The word contains " + tipp + " !";
		} else {
			return "Sorry but the word does not contain " + tipp + " :(";
		}
	}
}
