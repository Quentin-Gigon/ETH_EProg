/*
Bisher haben Sie Arrays verwendet, wenn Sie mit einer grösseren Anzahl von Werten gearbeitet haben. Ein Nachteil von Arrays ist, dass die Grösse beim Erstellen des Arrays festgelegt werden muss und danach nicht mehr verändert werden kann. In dieser Aufgabe implementieren Sie selbst eine Datenstruktur, bei welcher die Grösse im Vornherein nicht bestimmt ist und welche jederzeit wachsen und schrumpfen kann: Eine linked list oder verkettete Liste.
Eine verkettete Liste besteht aus mehreren Objekten, welche Referenzen zueinander haben. Für diese Aufgabe besteht jede Liste aus einem “Listen-Objekt” der Klasse LinkedIntList, welches die gesamte Liste repräsentiert, und aus mehreren “Knoten-Objekten” der Klasse IntNode, eines für jeden Wert in der Liste. Die Liste heisst “verkettet”, weil jedes Knoten-Objekt ein Feld mit einer Referenz zum nächsten Knoten in der Liste enthält. Das LinkedIntList-Objekt schliesslich enthält eine Referenz zum ersten und zum letzten Knoten und hat ausserdem ein Feld für die Länge der Liste.
5
Abbildung 1 zeigt eine Liste, welche die Werte 1, 3, 3, 7 enthält. Beachten Sie, dass das next- Feld des letzten Knotens in der Liste auf kein Objekt zeigt, d.h. den Wert null enthält. Ausserdem wird eine leere Liste so repräsentiert, dass beide Felder first und last den Wert null enthalten (und size gleich 0 ist).
a) Schreiben Sie die Klassen LinkedIntList und IntNode, welche zusammen eine verkettete Liste von ints ergeben. Erstellen Sie die Klassen und fügen Sie die benötigten Felder hinzu. Zuerst sollen Sie der Klasse LinkedIntList eine addLast()-Methode hinzufügen, welche einen int-Wert entgegen nimmt und diesen am Ende der Liste anhängt.
Erweitern Sie danach die LinkedIntList-Klasse mit folgenden Methoden, um die Klasse benutzerfreundlicher zu machen:
Name Parameter
Rückg.-Typ Beschreibung
void Fügt einen Wert am Anfang der Liste ein
int Entfernt den ersten Wert und gibt ihn zurück int Entfernt den letzten Wert und gibt ihn zurück void Entfernt alle Wert in der Liste
boolean Gibt zurück, ob die Liste leer ist
int Gibt den Wert an der Stelle index zurück
void Ersetzt den Wert an der Stelle index mit value
addFirst
removeFirst
removeLast
clear
isEmpty
get set
int value
int index
int index, int value
Einige dieser Methoden dürfen unter gewissen Bedingungen nicht aufgerufen werden. Zum Beispiel darf removeFirst() nicht aufgerufen werden, wenn die Liste leer ist, oder get() darf nicht aufgerufen werden, wenn der gegebene Index grösser oder gleich der aktuellen Länge der Liste ist. In solchen Situationen soll sich Ihr Programm mit einer Fehlermeldung beenden. Verwenden Sie folgendes Code-Stück dafür:
if(condition) { Errors.error(message );
}
Ersetzen Sie condition mit der Bedingung, unter welcher das Programm beendet werden soll, und message mit einer hilfreichen Fehlermeldung. Die Errors-Klasse befindet sich bereits in Ihrem Projekt, aber Sie brauchen sie im Moment nicht zu verstehen.
b) Erstellen Sie ein Programm Echo.java, welches vom Benutzer int-Werte entgegen nimmt, diese in einer LinkedIntList speichert und zum Schluss alle Werte in der Liste wieder ausgibt. Das Programm soll solange Werte einlesen, bis der Benutzer eine ungültige Eingabe macht. Verwenden Sie dazu Scanner.hasNextInt().
Um alle Werte auszugeben, soll Ihr Programm von Knoten zu Knoten “springen”, angefangen beim ersten Knoten und solange, bis das Ende der Liste erreicht d.h. der nächste Knoten gleich null ist. Sie können folgendes Code-Stück dafür verwenden:
      for(IntNode n = list.first; n != null; n = n.next) { ... }
*/

public class LinkedIntList {

	public static IntNode first;
	public static IntNode last;
	public static int size;

	public static class IntNode {
		public int data; // data sored in this node
		public IntNode next; // link to next node of the list

		public IntNode() {
		}

		public IntNode(int data) {
			this.data = data;
		}

		public IntNode(int data, IntNode next) {
			this.data = data;
			this.next = next;
		}
	}

	// constructs an empty list
	public LinkedIntList() {
		first = null;
		last = null;
		size = 0;
	}

	// returns a bracketed comma separated version of the list
	public String toString() {
		if (first == null) {
			return "[]";
		} else {
			String result = "[" + first.data;
			IntNode current = first.next;
			while (current != null) {
				result = result + "," + current.data;
				current = current.next;
			}
			result = result + "]";
			return result;
		}
	}

	// appends given value to the beginning of the li^st
	public void addFirst(int value) {
		if (first == null) {
			first = new IntNode(value);
			last = first;
			size++;
		} else {
			IntNode temp = first;
			first = new IntNode(value, temp);
			size++;
		}
	}

	// appends given value to the end of the list
	public void addLast(int value) {
		if (first == null) {
			first = new IntNode(value);
			last = first;
			size++;
		} else {
			IntNode current = first;
			while (current.next != null) {
				current = current.next;
			}
			current.next = (new IntNode(value));
			last = current.next;
			size++;
		}
	}

	// removes first element of the list
	public int removeFirst() {
		if (first == null) {
			Errors.error("The list is empty, no element to remove");
		}

		int removed = first.data;
		first = first.next;
		size--;
		return removed;
	}

	// removes last element of the list
	public int removeLast() {
		if (first == null) {
			Errors.error("The list is empty, no element to remove");
		}

		int removed = last.data;
		IntNode current = first;
		while (current.next != last) {
			current = current.next;
		}
		current.next = null;
		last = current;
		size--;

		return removed;
	}

	// clears the list
	public void clear() {
		first = null;
		last = first;
		size = 0;
	}

	// checks whether list is empty or not
	public boolean isEmpty() {
		if (first == null) {
			return true;
		} else {
			return false;
		}
	}

	// retrieves value at inputted index
	public int get(int index) {
		IntNode current = first;
		if (index > size) {
			Errors.error("there is no element at this index");
		} else {
			for (int i = 1; i < index; i++) {
				current = current.next;
			}
		}
		return current.data;
	}

	// changes value at inputted index with inputted value
	public void set(int index, int value) {
		IntNode current = first;
		if (index > size) {
			Errors.error("there is no element at this index");
		} else {
			for (int i = 1; i < index; i++) {
				current = current.next;
			}
		}
		current.data = value;
	}

	public static void main(String[] args) {
		LinkedIntList newlist = new LinkedIntList();
		newlist.addLast(100);
		newlist.addLast(77);
		newlist.addLast(88);
		newlist.addLast(99);
		newlist.set(2, 100);

		System.out.println("List Size =" + size);
		if (first != null) {
			System.out.println("First ->" + first.data);
		}
		if (first != null) {
			System.out.println("Last->" + last.data);
		}
		System.out.println(newlist.toString());
	}
}
